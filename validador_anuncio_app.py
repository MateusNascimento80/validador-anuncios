# validador_anuncio_app.py

import requests
from bs4 import BeautifulSoup
import streamlit as st
from urllib.parse import urlparse
import pandas as pd
import io
from reportlab.lib.pagesizes import letter
from reportlab.platypus import Table, TableStyle, Paragraph, SimpleDocTemplate, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import matplotlib.pyplot as plt
import seaborn as sns
import base64

PALAVRAS_CHAVE = ["t√™nis", "mochila", "smartphone", "cal√ßa", "notebook", "sapato", "jaqueta"]

st.set_page_config(page_title="Validador de An√∫ncios", layout="centered")
st.title("üîé Validador de An√∫ncios de Marketplace")

st.markdown("""
Este app analisa a qualidade de an√∫ncios em marketplaces como Mercado Livre, Shopee e Amazon, baseado em crit√©rios como t√≠tulo, SEO, imagens, descri√ß√µes, v√≠deos e avalia√ß√µes.
""")

def detectar_marketplace(url):
    dominio = urlparse(url).netloc
    if "mercadolivre" in dominio:
        return "mercadolivre"
    elif "shopee" in dominio:
        return "shopee"
    elif "amazon" in dominio:
        return "amazon"
    else:
        return "desconhecido"

def gerar_grafico_barras(pontuacoes, nomes):
    fig, ax = plt.subplots()
    sns.barplot(x=nomes, y=pontuacoes, palette="Blues_d", ax=ax)
    ax.set_title("Pontua√ß√£o Total por An√∫ncio")
    ax.set_ylabel("Pontua√ß√£o")
    ax.set_ylim(0, 8)
    buffer = io.BytesIO()
    fig.savefig(buffer, format='png')
    buffer.seek(0)
    return buffer

def gerar_pdf_comparativo_multiplos(resultados, nomes):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    elements = []

    elements.append(Paragraph("<b>Relat√≥rio Comparativo de An√∫ncios</b>", styles['Title']))
    elements.append(Spacer(1, 12))

    colunas = ["Crit√©rio"] + nomes
    data = [colunas]
    categorias = {
        "üìå T√≠tulo e SEO": ["Tem t√≠tulo", "T√≠tulo SEO (40-80 chars)", "T√≠tulo com palavra-chave"],
        "üñºÔ∏è Conte√∫do Visual": ["Quantidade de imagens", "Tem v√≠deo"],
        "üìù Descri√ß√£o": ["Tem descri√ß√£o", "Tem bullet points"],
        "‚≠ê Avalia√ß√µes": ["Tem avalia√ß√µes", "Nota m√©dia", "Total de avalia√ß√µes"],
        "üìä Pontua√ß√£o": ["Pontua√ß√£o total"]
    }
    for categoria, itens in categorias.items():
        data.append([categoria] + ["" for _ in resultados])
        for crit in itens:
            linha = [crit] + [str(r[crit]) for r in resultados]
            data.append(linha)

    table = Table(data, hAlign='LEFT')
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2c3e50')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#ecf0f1'))
    ]))

    elements.append(table)
    elements.append(Spacer(1, 12))

    pontuacoes = [int(r['Pontua√ß√£o total'].split("/")[0]) for r in resultados]
    img_buffer = gerar_grafico_barras(pontuacoes, nomes)
    img = Image(img_buffer, width=400, height=250)
    elements.append(Paragraph("<b>Gr√°fico: Pontua√ß√£o Total por An√∫ncio</b>", styles['Heading2']))
    elements.append(img)

    doc.build(elements)
    buffer.seek(0)
    return buffer
